{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Epure","text":"<p> The purest architecture, intuitive EList, smart queries, concise syntax </p> <p>Documentation: https://epurelib.github.io/latest/</p> <p>Source Code: https://github.com/nagvalhm/epure</p> <p>Epure is python type-based ORM - you can store and retrieve data having no idea about database, table and columns.  All technical details hidden from you. Care only about your business logic.</p> <p>Key features:</p> <ul> <li>Convenient: Many useful and intuitive tools, like Elist, Eset, JoinResource and many more</li> <li>Fast: Create tables based on your classes in no time</li> <li>Concise: Encourages efficient building of flexible and smart queries</li> <li>Elegant: Epure allows structure of your project to be as complicated or simple as you want</li> </ul>"},{"location":"#installing","title":"Installing","text":"<p>Install and update using <code>pip</code>:</p> <pre><code>$ pip install -U epure\n</code></pre> <p>Install and update using <code>poetry</code>:</p> <pre><code>$ poetry add epure@latest\n</code></pre>"},{"location":"#a-simple-epurized-class-example","title":"A Simple Epurized Class Example","text":"<p>Let's start with simple example for Epure, you will need your DataBase to be up and running. We will be using PostgresSQL for this example.</p> <p>Warning</p> <p>Note that you need to use type hints for class attributes in order to save class to DB. Class attribute without a type-hint will not be saved in DB.</p> <p>If you dont know which type-hint you want to use, but still want to save your field: use <code>object</code> type-hint and your instance will be saved as <code>JSON</code>.</p> <p>Read more about supported types for type-hinting  here </p>"},{"location":"#connect-it","title":"Connect it","text":"<p>Connect Epure to your DB:</p> <pre><code>from epure import epure, escript, GresDB\nfrom ..epure.generics import NotNull # (1)!\nfrom typing import List, Dict\n\nGresDb('postgres://postgres:postgres@localhost:5432',\nlog_level=3).connect() # (2)!\n</code></pre> <ol> <li>Check out more about generic Epure types here: link</li> <li>Format of string to connect ('database://user:password@host:port'); Note that there is two ways to connect to db, read here:</li> </ol> <p>GresDB and supported DB's</p> <p>Read more about GresDB class and supported by Epure DataBases  here </p>"},{"location":"#define-it","title":"Define it","text":"<p>Define a class that you want to save as a table and its  magic  method:</p> <pre><code>@epure() # (3)!\nclass Example:\n    int_attr:int\n    str_attr:str\n    float_attr:NotNull[float] = 3.14\n    generic_list:List[int] = [3, 4, 8]\n\n    def __init__(int_attr, str_attr=\"Hello World!\"):\n        self.int_attr = int_attr\n        self.str_attr = str_attr\n\n    @escript # (4)!\n    def smart_query_example(self): [func]\n        md = self.md # (5)!\n        query = md.str_attr in (\"Hello Sun!\") # (6)!\n        #\u2193\u2193\u2193\n        # query = \"SELECT public.example.str_attr IN (\"Hello Sun!\")\"\n        res = self.resource.read(query) # (7)!\n        return res\n</code></pre> <ol> <li><code>@epure</code> is metaclass decorator function, that modifies class; more info here: </li> <li><code>@escript</code> is method decorator for @epure decorated classes; more info here:</li> <li>note that md (short for <code>Model</code>) is only available in @escript decorated method scope and only; more info here: </li> <li>read more about supported SQL operators in <code>Epure</code> like <code>in</code> here:</li> <li>learn more about <code>read()</code> here:</li> </ol> <p>Read more about  magic  methods and <code>@escript</code> decorator  here </p>"},{"location":"#save-it","title":"Save it","text":"<p>Create and save instances of your class as such:</p> <pre><code>obj1 = Example(42)\nobj1.save()\n\nobj2 = Example(99, \"Hello Sun!\")\nobj2.save()\n</code></pre>"},{"location":"#retrieve-it","title":"Retrieve it","text":"<p>Now when your instances saved in DB table named <code>public.example</code>, we can talk about creating queries variations:</p>"},{"location":"#1-smart-queries-with-use-of-escript-magic-method","title":"1. smart queries with use of <code>@escript</code> magic method","text":"<p>Method itself becomes magical after we decorated it with <code>@escript</code>. It will take your smart query and will turn it into a <code>SQL</code> string.</p> <p>Passing it then to <code>.read()</code> will retrieve <code>Example</code> object with <code>str_attr</code> with value <code>\"Hello Sun!\"</code>.</p> <p>And calling <code>.smart_query_example()</code> method will  magically  return your retrieved object. Viola!</p> <p><pre><code>res2 = obj2.smart_query_example() # -&gt; list[list[epure_object]]\n\nres2[0].int_attr # -&gt; 99\nres2[0].str_attr # -&gt; \"Hello Sun!\"\n</code></pre> Read more about  magic  methods, <code>smart_queries</code> and <code>@escript</code> decorator  here </p>"},{"location":"#2-shortcut-read-with-kwarg-parameters","title":"2. shortcut  <code>read()</code> with kwarg parameters","text":"<p>Alternatively if you:</p> <ul> <li> <p>know attribute by which you want to get set of objects</p> </li> <li> <p>have <code>data_id</code> (<code>UUID</code>) of specific object</p> </li> </ul> <p>you can use <code>.read()</code> method that takes key-word arguments and allows this ready to hand approach of getting objects</p> <pre><code>data_id = obj1.data_id # -&gt; UUID4 # (1)!\n\n# unique data_id of object\nres1 = obj1.table.read(data_id=data_id) # -&gt; list[&lt;Example object at 0x0...&gt;]\n\n# or\n\n# multiple attrs of object\nres1 = Example.resource.read(str_attr=\"Hello World!\", int_attr=42) # -&gt; list[list[&lt;Example object at 0x0...,&gt;, ...]]\n\nres1[0].int_attr # -&gt; 42\nres1[0].str_attr # -&gt; \"Hello World!\"\n</code></pre> <ol> <li>data_id is a unique UUID object identifier that Epure uses to discriminate different objects</li> </ol> <p>Read more about <code>.read()</code> here </p>"},{"location":"#advanced-example-with-joinresource","title":"Advanced example with JoinResource","text":"<p>Check out what is JoinResource and more advanced example with join : here :</p>"},{"location":"#elist-and-eset","title":"Elist and Eset","text":""},{"location":"#elist","title":"Elist","text":"<p>Elist is really convenient in terms of using easy savable and retrievable data collection.</p> <p>You can look at it like strictly typed list with an idea of simple saving and retrieving its contents from DB.</p> <p>Elist can guarantee numerated order of objects when is used by user at a time.</p> <p>But in cases of big system with multiple users please refer to Eset .</p> <p>Let's look at an example:</p> Elist example for storing and retrieving items <pre><code>from epure import epure, Elist\n\n@epure()\nclass Example:\n    int_attr:int = 42\n    str_attr:str = \"Hello World!\"\n\n@epure()\nclass ElistExample:\n    elist_str:Elist[str] = Elist[str]([\"Like\",\"a\", \"piece\", \"of\", \"cake\"])\n    elist_epure:Elist[Example]\n\nex1 = Example()\nex1.int_attr = 68\n\nex2 = Example()\n\nelist_ex = ElistExample()\nelist_ex.elist_epure = Elist[Example]([ex1, ex2])\nelist_ex.save() # (1)!\n\nelist_ex_read = ElistExample.resource.read(data_id = elist_ex.data_id)\n\nelist_ex_read[0].elist_str[4] # -&gt; \"cake\"\nelist_ex_read[0].elist_epure[0].int_attr # -&gt; 68\n</code></pre> <ol> <li>Saving this Epure instance with Elist field will triger saving for Elist</li> </ol>"},{"location":"#eset","title":"Eset","text":"<p>Eset is similar to Elist, though it does not guarantee order of its stored contents.</p> <p>It is convenient in cases when you need store big chunks of data. You can then easily retrieve part of data stored in it based on criteria specified</p> <p>This is in a way our interpretation of many2many field.</p> Eset example for storing, loading and retrieving items <pre><code>from epure import epure, Eset\n\n@epure()\nclass Example:\n    int_attr:complex = 5 + 7j\n    str_attr:str = \"Hello Sky!\"\n\n@epure()\nclass EsetExample:\n    eset_str:Eset[str]\n    eset_epure:Eset[Example]\n\nex1 = Example()\nex2 = Example()\n\neset_ex = EsetExample()\n\neset_ex.eset_epure = Eset[Example]((ex1, ex2))\n\neset_ex.eset_str = Eset[str]((\"Grin\", \"like\", \"a\", \"Cheshire\", \"cat\"))\n\neset_ex.save() # (1)!\n\neset_ex_read = EsetExample.resource.read(data_id = eset_ex.data_id)[0]\n\neset_ex_read.eset_epure # -&gt; {}\neset_ex_read.eset_epure.load() # (2)!\neset_ex_read.eset_epure # -&gt; {&lt;Example object at 0x0...&gt;, &lt;Example object at 0x0...&gt;}\n\neset_ex_read.eset_str # -&gt; {}\neset_ex_read.eset_str.load() # (2)!\n\"\".join(eset_ex_read.eset_str) # -&gt; \"Cheshire Grin cat like a\"\n</code></pre> <ol> <li>Note that saving this will triger recursive saving for all elists and esets bounded to this object</li> <li>Eset is empty when is retrieved, you need to use .load() method of Eset to fill the eset with its content.</li> </ol>"},{"location":"#serialization-and-deserialization-of-epure-objects","title":"Serialization and deserialization of Epure objects","text":"<p>Epure allows to serialize your \"epurized\" class <code>object</code> to <code>JSON</code> using <code>.to_dict()</code> and <code>.to_json()</code> methods </p> <p>As much as it allows to deserialize <code>JSON</code> back to a Epure <code>object</code> using <code>.from_dict()</code> and <code>.from_json()</code></p> <p>For serialization with <code>.to_dict()</code> and <code>.to_json()</code> example head down  here </p> <p>And for deserialization using <code>.from_dict()</code> and <code>.from_json()</code> check out example  here </p>"},{"location":"#ini-file-parser","title":"Ini File Parser","text":"<p>This section of library appeared mainly because there is no adequate solution for working with ini files in python</p> <p>File Ini Parser allows to easily work with sections of <code>.ini</code> file using dot (<code>.</code>) notation</p>"},{"location":"#a-small-example","title":"A small example","text":"<p>Save this as example.ini file:</p> example.ini<pre><code>db_host = localhost\n\n[general]\ndb_port = 5432\n\n[epure.best.app.forever]\nfriend = true\n</code></pre> <p>Now we can easily access fields of this ini file:</p> <pre><code>from epure.files import IniFile\n\nconfig = IniFile('./example.ini')\n\nconfig.db_host # -&gt; \"localhost\"\n\nconfig.general.db_port # -&gt; 5432\n\nconfig.epure.best.app.forever.friend # -&gt; True\n</code></pre> <p>Learn more about Ini Parser  here </p>"},{"location":"#developers","title":"Developers","text":"<p>Nikita Umarov (Pichugin),  Pavel Pichugin</p>"},{"location":"#sponsor-us","title":"Sponsor us","text":""},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://github.com/nagvalhm/epure/blob/main/README.md</li> <li>Changes: https://github.com/nagvalhm/epure</li> <li>PyPI Releases: https://pypi.org/project/epure/</li> <li>Source Code: https://github.com/nagvalhm/epure</li> <li>Issue Tracker: https://github.com/nagvalhm/epure/issues</li> <li>Website: https://pypi.org/project/epure/</li> </ul>"},{"location":"help/","title":"Help","text":"<p>If you discovered a bug or have a question: please create a issue on Epure github https://github.com/nagvalhm/epure/issues</p> <p>Contact Epure developing team through email: @mail</p>"},{"location":"learn/column_proxy_methods/","title":"Supported ColumnProxy methods with @escript decorator","text":"<p>Listed below methods are supported in decorated with <code>@escript</code> methods of \"epurized\" class such as those described in <code>@escript</code> section here</p> <p>Methods below demonstrate how operators in Epure will be translated in SQL and the class used in examples will be declared here:</p> <pre><code>    @epure\n    class MyEpureCls:\n        my_str_field:str\n        my_int_field:int\n</code></pre> <p>Operators Precedence</p> <p>Precedence of these operators are same as in SQL and brackets does not affect precedence (at least for now).</p>"},{"location":"learn/column_proxy_methods/#1-equality-operator","title":"1) Equality operator \"<code>==</code>\"","text":"<p>In Epure: <code>==</code> -&gt; In sql: <code>=</code></p> Example for <code>==</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field == \"Honesty is the best policy\"\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls \nWHERE my_str_field = \"Honesty is the best policy\"\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#2-inequality-operator","title":"2) Inequality operator \"<code>!=</code>\"","text":"<p>In Epure: <code>!=</code> -&gt; In sql: <code>&lt;&gt;</code></p> Example for <code>!=</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field != \"Honesty is the best policy\"\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls \nWHERE my_str_field &lt;&gt; \"Honesty is the best policy\"\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#3-more-and-more-or-equals-operator-and","title":"3) More and more or equals operator \"<code>&gt;</code>\" and \"<code>&gt;=</code>\"","text":"<p>In Epure: <code>&gt;</code> -&gt; In sql: <code>&gt;</code></p> <p>In Epure: <code>&gt;=</code> -&gt; In sql: <code>&gt;=</code></p> Example for <code>&gt;</code> and <code>&gt;=</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_int_field &gt; \"42\"\n    self.md.my_int_field &gt;= \"80\"\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls \nWHERE my_int_field &gt; 42\n\nSELECT * \nFROM public.my_epure_cls \nWHERE my_int_field &gt;= 80\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#4-less-and-less-or-equals-operator-and","title":"4) Less and less or equals operator \"<code>&lt;</code>\" and \"<code>&lt;=</code>\"","text":"<p>In Epure: <code>&lt;</code> -&gt; In sql: <code>&lt;</code></p> <p>In Epure: <code>&lt;=</code> -&gt; In sql: <code>&lt;=</code></p> Example for <code>&lt;</code> and <code>&lt;=</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_int_field &lt; \"42\"\n    self.md.my_int_field &lt;= \"80\"\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls \nWHERE my_int_field &lt; 42\n\nSELECT * \nFROM public.my_epure_cls \nWHERE my_int_field &lt;= 80\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#5-not-operator-not","title":"5) Not operator \"<code>not</code>\"","text":"<p>In Epure: <code>not</code> -&gt; In sql: <code>NOT</code></p> Example for <code>not</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    not self.md.my_int_field &gt; 66\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls \nWHERE NOT my_int_field &gt; 66\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#6-not-in-operator-not-in","title":"6) Not in operator \"<code>not in</code>\"","text":"<p>In Epure: <code>not in</code> -&gt; In sql: <code>NOT IN</code></p> Example for <code>not in</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field not in (\"dog\", \"goes\", \"woof\")\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field NOT IN (\"dog\", \"goes\", \"woof\")\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#7-and-operator-and","title":"7) And operator \"<code>and</code>\"","text":"<p>In Epure: <code>and</code> -&gt; In sql: <code>AND</code></p> Example for <code>and</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field == \"Milky Galaxy\" and self.md.my_int_field != 90\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field = \"Milky Galaxy\" AND my_int_field &lt;&gt; 90\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#8-all-operator-all-in-development","title":"8) All operator \"<code>.all()</code>\" (In development)","text":""},{"location":"learn/column_proxy_methods/#9-any-operator-any-in-development","title":"9) Any operator \"<code>.any()</code>\" (In development)","text":""},{"location":"learn/column_proxy_methods/#10-between-operator-between-in-development","title":"10) Between operator \"<code>.between()</code>\" (In development)","text":""},{"location":"learn/column_proxy_methods/#11-in-operator-in","title":"11) In operator \"<code>in</code>\"","text":"<p>In Epure: <code>in</code> -&gt; In sql: <code>IN</code></p> Example for <code>in</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field in (\"dog\", \"goes\", \"woof\")\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field IN (\"dog\", \"goes\", \"woof\")\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#12-like-operator-like","title":"12) Like operator \"<code>.like()</code>\"","text":"<p>In Epure: <code>.like()</code> -&gt; In sql: <code>LIKE</code></p> Example for <code>.like()</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field.like(\"%R\")\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field LIKE \"%R\"\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#13-or-operator-or","title":"13) Or operator \"<code>or</code>\"","text":"<p>In Epure: <code>or</code> -&gt; In sql: <code>OR</code></p> Example for <code>or</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field == \"Milky Galaxy\" or self.md.my_int_field != 90\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field = \"Milky Galaxy\" OR my_int_field &lt;&gt; 90\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#14-some-operator-some-in-development","title":"14) Some operator \"<code>.some()</code>\" (In development)","text":""},{"location":"learn/column_proxy_methods/#15-is-operator-is","title":"15) Is operator \"<code>is</code>\"","text":"<p>In Epure: <code>is</code> -&gt; In sql: <code>IS</code></p> Example for <code>is</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field is None\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field IS NULL\n</code></pre></p>"},{"location":"learn/column_proxy_methods/#15-is-not-operator-is-not","title":"15) Is not operator \"<code>is not</code>\"","text":"<p>In Epure: <code>is not</code> -&gt; In sql: <code>IS NOT</code></p> Example for <code>is not</code> operator <p><pre><code>@escript\ndef my_decorated_method():\n    self.md.my_str_field is not None\n</code></pre> Will be in SQL: <pre><code>SELECT * \nFROM public.my_epure_cls\nWHERE my_str_field IS NOT NULL\n</code></pre></p>"},{"location":"learn/domain_model/","title":"Domain and Model","text":""},{"location":"learn/domain_model/#model","title":"Model","text":"<p>In Epure, Model class represents table and your decorated by @epure() class from db perspective.</p> <p>Model of a class can be accessed through the <code>.md</code> field</p> <p>Accessing <code>.dom</code>, <code>.md</code> fields and <code>.model()</code> method</p> <p><code>.dom</code>, <code>.md</code> fields and <code>.model()</code> method can be only accessed in method of \"epurized\" class, decorated by @escript function. Read more about @escript here</p> <p>You can get ColumnProxy objects by accessing fields of Model</p> <p>Through ColumnProxy object you then can create all kinds of queries. Read more about examples and methods of ColumnProxy that are used with <code>@escript</code> decorator here</p> Getting ColumnProxy field from Model <pre><code>from epure import escript, epure\n\n@epure\nclass MyEpureCls:\n    int_field:int \n...\n\n...\n@escript\ndef method_to_get_model(self):\n    my_epure_cls_model = self.md # This will return Model of MyEpureCls\n\n    my_epure_cls_model.int_field # This will return ColumnProxy of int_field field\n...\n</code></pre>"},{"location":"learn/domain_model/#model-method","title":"<code>.model()</code> method","text":"<p><code>.model()</code> is a simple and easy way to get the Model object of class using instance of this class e.g.:</p> Getting Model object with <code>.model()</code> method <p>The more convinient way if you have instance of Class</p> <pre><code>from epure import escript, epure\n\n@epure\nclass MyEpureCls:\n...\n\n...\n@escript\ndef method_to_get_model(self):\n    my_epure_cls_model = self.model(MyEpureCls) # This will return Model object\n...\n</code></pre>"},{"location":"learn/domain_model/#domain","title":"Domain","text":"<p>Domain comes from the idea of \"DDD\" or Domain Driven Design, in Epure, Domain represents object of DataBase and can be accessed through the <code>.dom</code> field</p> <p>Accessing <code>.dom</code>, <code>.md</code> fields and <code>.model()</code> method</p> <p><code>.dom</code>, <code>.md</code> fields and <code>.model()</code> method can be only accessed in method of \"epurized\" class, decorated by @escript function. Read more about @escript here</p> <p>You can dynamically interact with Domain object by getting Models from it.</p> Getting Model object from Domain <p>The more convinient way if you have instance of Class</p> <pre><code>from epure import escript, epure\n\n@epure\nclass MyEpureCls:\n...\n\n...\n@escript\ndef method_to_get_model(self):\n    my_epure_cls_model = self.model(MyEpureCls) # This will return Model object\n...\n</code></pre> <p>Or if you know the table name of Model which you want to get</p> <pre><code>...\n@escript\ndef method_using_dom_field(self):\n    dom_object = self.dom # This will return Domain object\n    my_epure_cls_model = self.dom.my_epure_cls\n...\n</code></pre>"},{"location":"learn/elist_eset/","title":"Eset and Elist","text":""},{"location":"learn/elist_eset/#elist-and-eset-shared-logic","title":"Elist and Eset: shared logic","text":"<p><code>Elist</code> and <code>Eset</code> are Generic strict-type-based Alias classes and are created with subscripting the <code>Elist</code> or <code>Eset</code> class with the argument of python primitive <code>type</code> or Epure <code>type</code> </p> <p>e.g.</p> Example of creating Elist or Eset by subscriptiting type <pre><code>from epure import Elist, Eset\n\nElist[str]\n\nEset[int]\n</code></pre> <p>or</p> <pre><code>from epure import Elist, Eset, epure\n\n@epure()\nclass MyEpure:\n    ...\n\nElist[MyEpure]\nEset[MyEpure]\n\n@epure()\nclass MyOtherEpure:\n    my_elist_field:Elist[MyEpure]\n    my_eset_field:Eset[MyEpure]\n</code></pre> <p>Elist and Eset are strict-type-based</p> <p><code>Elist</code> and <code>Eset</code> are strict-type-based classes which means that they can contain only instances of their subscripted class:</p> Example of Eset and Elist strict-type-based nature <pre><code>@epure()\nclass RightElist:\n    some_elist:Elist[str] = Elist[str]([\"You\", \"are\", \"wizard\", \"Harry\"])\n\nstr_elist = RightElist()\n</code></pre> <p>Now if we would want to add some other type, for example <code>int</code> to our <code>str_elist</code>:</p> <p>Adding instance of type other than <code>str</code> type will raise an error</p> <pre><code>str_elist.append(42) # TypeError(\"value '42' of type '&lt;class 'int'&gt;' \n                     # is not same type as \n                     # Elist 'ecollections.elist__str' \n                     # type of '&lt;class 'str'&gt;'\")\n</code></pre> <p>Checking type of Elist or Eset</p> <p><code>Elist</code> and <code>Eset</code> classes constructor is defined in <code>ECollectionMetacls</code>, so to check if class is <code>Elist</code> or <code>Eset</code>, it is best to use <code>isinstance()</code> function for their type</p> Example of checking Elist or Eset type <pre><code>isinstance(Elist[str], ECollectionMetacls) # True\n</code></pre> <pre><code>\n</code></pre> <p>Because <code>Elist</code> and <code>Eset</code> are Generic Alias type, when subscripted - Elist class will be stored in <code>.__origin__</code> field of created from subscription class:</p> Check type with <code>__origin__</code> field of Elist or Eset <pre><code>from epure import Elist\n\nmy_elist = Elist[str]\n\ntype(my_elist) == Elist # False\n\ntype(my_elist.__origin__) == Elist # True\n</code></pre>"},{"location":"learn/elist_eset/#elist","title":"Elist","text":"<p>Elist is a very usefull collection based on <code>list</code> when:</p> <ul> <li>you need to store small amounts of data</li> <li>to have consistent and numerated order of stored items</li> <li>used by one user at same time</li> </ul> The way Elist is stored in DB <p>Elist is created and stored in DB (by default in ecollections scheme) in form of table with name: <code>\"elist__\"</code> + \"{name of your type}\" e.g. <code>\"elist__str\"</code>, <code>\"elist__my_epure_cls\"</code></p> Example of the way Elist is stored <pre><code>Elist[str] # This will be stored in \"elist__str\"\n</code></pre> <p>Contrary for Eset - you dont need to call <code>.load()</code> method for Elist.</p> <p>Elist inherits some of <code>list</code> type methods, but they may differ from python default <code>list</code> methods: these methods are explained below.</p> <p>Warning for multi-user usage</p> <p>In systems where is more than one user will interact with one <code>Elist</code> - <code>Elist</code> may lose consistency for its order of stored items. </p> <p>If you want more multiuser-friendly alternative - your best choise is Eset.</p> Example of creating Elist, saving, deleting its contents <pre><code>from epure import Elist, Eset, epure\n\n@epure()\nclass SomeEpureElist:\n    my_elist_field:Elist[str] = Elist[str]([\"knowledge\", \"is\", \"power\"])\n\nmy_inst = SomeEpureElist()\n\nmy_inst.save() # this will triger recursive save for\n               # all esets, elists and its internal epure vals to save()\n\ndata_id = my_inst.data_id\n\nres = SomeEpureElist.resource.read(data_id = data_id)\n\nres[0].my_elist_field[2] # power\n\nres[0].pop(0) # knowledge\n</code></pre>"},{"location":"learn/elist_eset/#elist-methods","title":"Elist methods:","text":"<p>(*If none description provided, then methods's return type and signature does not differ from default python <code>list</code> methods)</p> <pre><code>Elist.load(self, *args, **kwargs)\n    \"\"\"Loads all items of Elist contents like Epure, Elist, Eset \n     values from DataPromises\"\"\"\n\nElist.ids(self)\n    \"\"\"Returns data_id's from all stored items in Elist if Elist was saved\"\"\"\n\nElist.save(self)\n    \"\"\"Saves Elist to DB\"\"\"\n\nElist.append(item)\n\nElist.extend(Elist) (In progress)\n\nElist.insert(index, item)\n\nElist.remove(value)\n\nElist.pop(index)\n\nElist.clear()\n\nElist.index(item[, start[, end]])\n\nElist.count(item) (In progress)\n\nElist.sort(*, key=None, reverse=False) (In progress)\n\nElist.reverse() (In progress)\n\nElist.copy() (In progress)\n</code></pre>"},{"location":"learn/elist_eset/#eset","title":"Eset","text":"<p>Eset is our interpretation of Many-To-Many field. </p> <p>Eset is convinient when you:</p> <ul> <li>potentially want to store big amounts of data</li> <li>do not care about the order of stored items </li> <li>can be used by many people simultaneously</li> </ul> <p>Loading Eset</p> <p>When Eset is retrived from DB - Eset is empty by default, so it needs be loaded by <code>.load()</code> method of Eset.</p> Using <code>.load()</code> <pre><code>@epure()\nclass MyEpureCls:\n    my_eset = Eset[str]([\"up\", \"down\"])\n\nmy_inst = MyEpureCls()\n\nmy_inst.save()\n\ndata_id = my_inst.data_id\n\nres = MyEpureCls.resource.read(data_id=data_id)\n\nres[0].my_eset # {}\n\nres[0].my_eset.load()\n\nres[0].my_eset # {\"up\", \"down\"}\n</code></pre> The way Eset is stored in DB <p>In DB Eset is stored by default in ecollection scheme in two ways:</p> <p>1) When Eset is a bound field of \"epurized\" (1) class, collection will be saved in table: <code>\"eset__\"</code> + \"{name of your field}\" e.g. <code>\"my_epure_cls__my_eset\"</code></p> <ol> <li>\"epurized\" class is class that was decorated by <code>@epure()</code> decorator</li> </ol> Example of bounded Eset to epurized class <pre><code>@epure()\nclass MyEpureCls:\n    myElist:Eset[str] = Elist[str]([\"puss\", \"in\", \"boots\"]) # this will be stored as \"my_epure_cls__myelist\"\n</code></pre> <p>(in cases when type is primitive like <code>str</code> or <code>int</code>, it will be stored in number 2) way)</p> <p>2) When Eset is not bounded to any class, it is stored in a way like elist: <code>\"eset__\"</code> + \"{name of your type}\" e.g. <code>\"eset__int\"</code>, <code>\"eset__new_epure\"</code></p> Example of not bounded to class Eset <pre><code>class MyBasicCls:\n    my_elist_epure:Eset[MyEpureCls] # this will be stored as \"eset__my_epure_cls\"\n</code></pre> <p>or</p> <pre><code>my_elist_epure:Eset[str] # this will be stored as \"eset__str\"\n</code></pre> Example of creating Eset, saving, deleting its contents <pre><code>from epure import Elist, Eset, epure\n\n@epure()\nclass SomeEpureEset:\n    my_eset_field:Eset[str] = Eset[str]([\"knowledge\", \"is\", \"power\"])\n\nmy_inst = SomeEpureElist()\n\nmy_inst.save() # this will triger recursive save for\n               # all esets, elists and its internal epure vals to save()\n\ndata_id = my_inst.data_id\n\nres = SomeEpureElist.resource.read(data_id = data_id)\n\nres[0].my_eset_field.load()\n\nres[0].remove(\"knowledge\")\n</code></pre>"},{"location":"learn/elist_eset/#eset-methods","title":"Eset methods:","text":"<p>(*If none description provided, then methods's return type and signature does not differ from default python <code>set</code> methods)</p> <pre><code>Eset.load()\n    \"\"\"Loads all items of Eset contents like Epure, Elist, Eset \n     values from DataPromises\"\"\"\n\nEset.ids()\n    \"\"\"Returns data_id's from all stored items in Elist if Elist was saved\"\"\"\n\nEset.save()\n    \"\"\"Saves Elist to DB\"\"\"\n\nEset.add(item)\n\nEset.clear()\n\nEset.copy() (In progress)\n\nEset.difference() (In progress)\n\nEset.difference_update() (In progress)\n\nEset.discard(val)\n\nEset.intersection() (In progress)\n\nEset.intersection_update() (In progress)\n\nEset.isdisjoint() (In progress)\n\nEset.issubset() (In progress)\n\nEset.issuperset() (In progress)\n\nEset.pop()\n\nEset.remove(val)\n\nEset.symmetric_difference() (In progress)\n\nEset.symmetric_difference_update() (In progress)\n\nEset.union() (In progress)\n\nEset.update(_set)\n</code></pre>"},{"location":"learn/epure_cls/","title":"@epure() decorator, its supported types and overriding default storing for epure","text":""},{"location":"learn/epure_cls/#more-on-epure-decorator","title":"More on <code>@epure()</code> decorator","text":"<p><code>@epure()</code> is a class decorator, that adds class Epure as an aditional parent to your class, making your class \"epurized\".</p> <p>Your \"epurized\" class may serve you as an controller for working with your DB.</p> Warning <p>Note that you need to use type hints for class attributes in order to save class to DB. Class attribute without a type-hint will not be saved in DB.</p>"},{"location":"learn/epure_cls/#supported-types-for-type-hinting-class-attributes","title":"Supported types for type-hinting class attributes","text":"<p>For type-hinting class attributes Epure supports:</p> <ul> <li>most of primitive types of <code>python</code> </li> <li>type: <code>UUID</code> </li> <li>other \"epurized\" classes and Elist and Eset Generic types</li> </ul> <p>Supported types</p> <pre><code>from uuid import UUID\nfrom epure import epure, Elist, Eset\n\n@epure()\nclass SomeEpureCls:\n    ...\n\n@epure()\nclass AllSupportedTypes:\n    my_int:int\n    my_str:str\n    my_complex:complex\n    my_float:float\n    my_bytes:bytes\n    my_bool:bool\n    my_UUID:UUID\n    my_Epure:SomeEpureCls\n    my_elist: Elist[str]\n    my_eset: Eset[bytes]\n</code></pre>"},{"location":"learn/epure_cls/#storing-epure-in-another-table-and-domain","title":"Storing Epure in another table and domain","text":""},{"location":"learn/epure_cls/#storing-epure-in-another-table","title":"Storing Epure in another table","text":"<p>By default when class is \"epurized\" than its table will be stored in table named after name of the class.</p> <p>Though you can override it passing name of domain to <code>@epure</code> function e.g.:</p> <p>Storing Epure in another table</p> <pre><code>@epure(\"AnotherTable\")\nclass AnotherClass:\n    my_str:str\n    ...\n</code></pre> <p>This will save class AnotherClass in table named \"another_table\"</p>"},{"location":"learn/epure_cls/#storing-epure-in-another-domain","title":"Storing Epure in another domain","text":"<p>Another option you can use is storing your table in another domain or \"scheme\"</p> <p>This is also done by passing str with name of path, but with additional dot notation:</p> <p>Storing Epure in another domain</p> <pre><code>@epure(\"my_other_domain.my_other_table\")\nclass SomeOtherClass:\n    my_str:str\n    ...\n</code></pre> <p>So this will be stored in scheme named \"my_other_domain\" and in table named \"my_other_table\".</p>"},{"location":"learn/epure_cls/#class-with-mulitple-inheritance-and-epure-decorator","title":"Class with mulitple inheritance and <code>@epure</code> decorator","text":"<p>When \"epurized\" class inherits another parent class, fields of this parent class will be inherited and stored in DB by \"epurized\" class</p> <p>Let's look at example:</p> <p>Example with class inheritance</p> <pre><code>class FirstParent:\n    first_parent_complex:complex\n    first_parent_uuid: UUID\n\nclass SecondParent:\n    second_parent_float:float\n    second_parent_bool:bool\n\n@epure()\nclass Child(FirstParent, SecondParent):\n    child_field_str:str\n    child_obj:object\n</code></pre> <p>In result there will be created a Table \"child\" with its parents inhereted fields of FirstParent: <code>first_parent_complex, first_parent_uuid</code> and of SecondParent: <code>second_parent_float, second_parent_bool</code></p>"},{"location":"learn/epure_read/","title":"Reading from resource with `.read()`","text":""},{"location":"learn/epure_read/#read","title":"<code>.read()</code>","text":"<p>Retriving data from resource (db) is done using <code>.read()</code> method</p> <pre><code>def read(self, *args, **kwargs) -&gt; Any\n</code></pre> <p>Read is called from resource of table property (table property is called from object of epure)</p> <p>Read takes either key-word arguments or result of creating query with <code>@escript</code> decorator (read abput <code>@escript</code> here):</p> Using <code>.read()</code> <p><pre><code>from epure import epure, escript\n\n@epure()\nclass MyEpure:\n    str_field:str\n\n    @classmethod\n    @escript\n    def my_query_creator(cls):\n        query = cls.md.str_field == \"a key-word arg\"\n\n...\n# creating and saving instances\n...\n</code></pre> Now to retrive your instances you can go either with:</p> <p>Key-word approach <pre><code>MyEpure.resource.read(str_field=\"a key-word arg\") # [[&lt;MyEpure obj&gt;, &lt;MyEpure obj&gt;]]\n</code></pre> Or <code>@escript</code> decorator approach <pre><code>query = MyEpure.my_query_creator()\nMyEpure.resource.read(query) # [[&lt;MyEpure obj&gt;, &lt;MyEpure obj&gt;]]\n</code></pre></p>"},{"location":"learn/escript_decorator/","title":"@escript decorator","text":""},{"location":"learn/escript_decorator/#magic-escript-decorator","title":"Magic <code>@escript</code> decorator","text":"<p><code>@escript</code> decorator is a method-decorator, that is used for decorating methods of \"epurized\" (1) class</p> <ol> <li>\"epurized\" class is class that was decorated by <code>@epure()</code> decorator</li> </ol> <p><code>@escript</code> decorator magicly convert your queries into strings</p> <code>@escript</code> decorator with <code>@classmethod</code> decorator <pre><code>...\n@classmethod\n@escript\ndef your_method():\n...\n</code></pre> <p>Info</p> <p>Only in method decorated by @escript, can be used instances of self.dom, self.md and method self.model</p> <p>Lets see an example:</p> Retrieving cats with more than one tail using <code>@escript</code> <p>For example you have a <code>class Cat</code>: <pre><code>@epure()\nclass Cat:\n    paws_cntr:int\n    name:str\n    tail_cntr:int\n    likes_catnip:bool\n</code></pre> And you want to get all the stored cats:</p> <ul> <li> <p>with more than one tail (lets assume there are some cat-alien species)</p> </li> <li> <p>and those cats who don't like catnip (a real weird cat-aliens)</p> </li> </ul> <p>Then we will define a method for <code>class Cat</code> decorated by <code>@escript</code>:</p> <pre><code>...\n@classmethod\n@escript\ndef get_all_cats_with_two_tails(cat):\n\n    my_query = cat.md.tail_cntr &gt; 1 and cat.md.likes_catnip == False\n\n    res = cat.resource.read(my_query)\n\n    res # [&lt;Cat object at 0x000001FFFC6800D0&gt;, &lt;Cat object at 0x000001FCFC6800D7&gt;, ...]\n\n...\n</code></pre> Let's look closely to my_query: <p><pre><code>...\nmy_query = cat.md.tail_cntr &gt; 1 and cat.md.likes_catnip == False\n...\n</code></pre> First, because method is a classmethod, in cat variable will be assigned class.</p> <p>Then we are taking <code>.md</code> Model of Cat class and taking Column <code>tail_cntr</code> and comparing it to more than 1</p> <p>In resulting list we will get cats with more than one tail and those who doesnt like catnip. Like expected!</p> What will be result SQL of this query <pre><code>SELECT * \nFROM public.cat \nWHERE cat.tail_cntr &gt; 1 AND cat.likes_catnip = False\n</code></pre> <p>All the avalible methods (e.g. <code>==</code>, <code>like</code>, <code>is_not</code>, <code>_is</code> etc),  for <code>self.md</code> can be found in Column Proxy methods section</p>"},{"location":"learn/ini_parser/","title":"More about IniFile parser","text":"<p>In Epure this section for parsing Ini files appeared because other python libraries that exist are somewhat inconvinient and complicated.</p> <p>Having a ini file - we can just get it fields using . (dot) notation.</p> Parsing Ini File example.ini<pre><code>db_host = localhost\n\n[general]\ndb_port = 5432\n\n[public]\n\n[section1]\ndb_port = 323\n\n[section1.section2]\ndb_user = user\n\n[section1.section2.section3]\npi_begins = 3.14159265359\n\n[epure.best.app.forever]\nepure_is_the_best = true\n</code></pre> <p>We can easily parse it:</p> <pre><code>example_ini = IniFile('./example.ini')\n\ndb_host = example_ini.db_host # 'localhost'\n\ndb_port = example_ini.general.db_port # 5432\n\ndb_user = example_ini.section1.section2.db_user # \"user\"\nan_db_user = example_ini.section1.db_port # 323\n\npi_begins = example_ini.section1.section2.section3.pi_begins # 3.14159265359\n\nepure_is_the_best = example_ini.epure.best.app.forever.epure_is_the_best # True\n\ndb_host = example_ini.not_exist_prop # None\n\nexample_ini = IniFile('not_exist_config.ini') # non-existent ini file will raise an error\ndb_host = example_ini.db_host\nassert db_host == None\n</code></pre>"},{"location":"learn/joins/","title":"Join","text":""},{"location":"learn/joins/#join-method","title":"<code>.join()</code> method","text":"model.py<pre><code>def join(\n        self, \n        model: Model, \n        on_clause: str, \n        join_type: str = \"LEFT\", \n        alias: str = \"\"\n    ) -&gt; JoinResource:\n</code></pre> <p><code>.join()</code> is a method of Model, that joins model(s) by specific <code>on_clause</code> and <code>join_type</code></p> <ul> <li> <p><code>model</code> parameter takes Model object that you want to join</p> </li> <li> <p><code>on_clause</code> specifies by which id (e.g. data_id) tables will be joined</p> </li> <li> <p><code>join_type</code> is the type of join, by default it is set to LEFT join</p> </li> <li> <p><code>alias</code> is experimental feature that might be added in future</p> </li> </ul> model.py<pre><code>def read(self, *args, **kwargs)\n</code></pre>"},{"location":"learn/joins/#advanced-example-with-two-joins","title":"Advanced example with two joins","text":"<p>Let's examine a case when we want to join three models using .join() method . </p> <p>We will create 3 classes (TestShippmentOffice, TestCustomer, TestOrder) and create much more instances for these classes, and then save them.</p> <p>Example</p> <pre><code>from epure.generics import NotNull # (5)!\nfrom epure import escript, epure\nfrom uuid import UUID\n\n@epure()\nclass TestShippmentOffice:\n    adress:NotNull[str]\n\n    def __init__(self, adress) -&gt; None:\n        self.adress = adress\n\noffice1_id = TestShippmentOffice(\"Washington str.\").save()\noffice2_id = TestShippmentOffice(\"Elm str.\").save()\noffice3_id = TestShippmentOffice(\"Kole str.\").save()\n\n@epure()\nclass TestCustomer:\n    name:str\n    country:str\n\n    def __init__(self, name:str, country:str) -&gt; None:\n        self.name = name\n        self.country = country\n\n    @classmethod\n    @escript\n    def test_two_joins(cls):\n        md = cls.md # (1)!\n        dom = cls.dom # (2)!\n\n        test_order_md = dom.test_order # (3)!\n\n        # test_office_md = dom.test_shippment_office\n        # or\n        test_office_md = cls.model(TestShippmentOffice) #(4)!\n\n        join_res = md.join(test_order_md,\\\n        md.data_id == test_order_md.test_customer_id) \n\n        join_res.join(test_office_md,\\\n        test_order_md.office_id == test_office_md.data_id) \n\n        res_header = join_res.read(\\\n            [test_office_md.adress, md.name,\\\n            md, test_order_md, md.country],\\ \n            test_office_md.adress == \"Washington str.\") # header\n\n        res_no_header = join_res.read(\\\n            test_office_md.adress == \"Washington str.\") # no header\n\n        res_empty = join_res.read() # no header, no on_clause\n\n        return res_header\n\nnico_id = TestCustomer(\"Nicolas\", \"Argentina\").save()\nvictor_id = TestCustomer(\"Victor\", \"USA\").save()\ntom_id = TestCustomer(\"Tom\", \"Japan\").save()\njohn_id = TestCustomer(\"John\", \"Laos\").save()\nmike_id = TestCustomer(\"Mike\", \"Monaco\").save()\nbob_id = TestCustomer(\"Bob\", \"Netherlands\").save()\n\n@epure()\nclass TestOrder:\n    test_customer_id:UUID\n    order_date:str \n    office_id:UUID\n\n    def __init__(self, test_customer_id, order_date, office_id) -&gt; None:\n        self.test_customer_id = test_customer_id\n        self.order_date = order_date\n        self.office_id = office_id\n\nTestOrder(nico_id, \"2022-03-15\", office1_id).save()\nTestOrder(victor_id, \"2022-03-10\", office2_id).save()\nTestOrder(nico_id, \"2022-03-15\", office1_id).save()\nTestOrder(tom_id, \"2022-03-30\", office1_id).save()\nTestOrder(john_id, \"2022-01-15\", office3_id).save()\nTestOrder(mike_id, \"2022-12-10\", office2_id).save()\nTestOrder(nico_id, \"2022-08-04\", office1_id).save()\nTestOrder(bob_id, \"2022-09-15\", office3_id).save()\nTestOrder(bob_id, \"2022-05-11\", office1_id).save()\n</code></pre> <ol> <li>Here we are accessing the md: Model object of TestCustomer class. Read more about it here</li> <li>Here we are accessing dom: Domain object of TestCustomer class. Read more about it here</li> <li>This way we get Model object of class TestOrder by accessing dom object. Read more about it here</li> <li>This <code>model()</code> method of Model might be more convinient for you if you have class instance in reach. Read more about it here</li> <li>Check out about Epure Generics more here</li> </ol> <p>Lets look at our <code>classmethod</code> a bit closer:</p> Looking closer at <code>test_two_joins</code> <pre><code>...\n@classmethod\n@escript\ndef test_two_joins(cls):\n    md = cls.md # (1)!\n    dom = cls.dom # (2)!\n\n    test_order_md = dom.test_order # (3)!\n\n    # test_office_md = dom.test_shippment_office\n    # or\n    test_office_md = cls.model(TestShippmentOffice) #(4)!\n\n    join_res = md.join(test_order_md,\\\n    md.data_id == test_order_md.test_customer_id) \n\n    join_res.join(test_office_md,\\\n    test_order_md.office_id == test_office_md.data_id) \n\n    res_header = join_res.read(\\\n        [test_office_md.adress, md.name,\\\n        md, test_order_md, md.country],\\ \n        test_office_md.adress == \"Washington str.\") # header\n\n    res_no_header = join_res.read(\\\n        test_office_md.adress == \"Washington str.\") # no header\n\n    res_empty = join_res.read() # no header, no on_clause\n\n    return res_header\n...\n</code></pre> <ol> <li>Here we are accessing the md: Model object of TestCustomer class. Read more about it here</li> <li>Here we are accessing dom: Domain object of TestCustomer class. Read more about it here</li> <li>This way we get Model object of class TestOrder by accessing dom object. Read more about it here</li> <li>This <code>model()</code> method of Model might be more convinient for you if you have class instance in reach. Read more about it here</li> </ol> <p>At line <code>14-15</code>:</p> <pre><code>\n</code></pre> <pre><code>join_res = md.join(test_order_md, md.data_id == test_order_md.test_customer_id) \n</code></pre> <p>Because TestOrder has <code>test_customer_id</code> field, we can use it as <code>on_clause</code> to join it to our TestCustomer Model</p> <p>At line <code>17-18</code>:</p> <pre><code>join_res.join(test_office_md,\\\n    test_order_md.office_id == test_office_md.data_id) \n</code></pre> <p>After we joined two Models, we can additionally join another Model TestOffice using <code>office_id</code></p> <p>At line <code>20-23</code>:</p> <pre><code>res_header = join_res.read(\\\n    [test_office_md.adress, md.name,\\\n    md, test_order_md, md.country],\\ \n    test_office_md.adress == \"Washington str.\") # header\n</code></pre> <p>read() here takes:</p> <ul> <li> <p><code>header</code> as <code>[test_office_md.adress, md.name, md, test_order_md, md.country]</code>, in this case we want to retrive address, name, the full Model itself, TestOrder Model, country and from these values classes will be initialized. </p> </li> <li> <p><code>on_clause</code> as <code>test_office_md.adress == \"Washington str.\"</code>, this means that only objects with this adress will be only retrived from db</p> </li> </ul> <p>and it will return list of list with classes <code>[[TestShippmentOffice, TestCustomer, TestOrder], ...]</code> that were joined on <code>test_customer_id</code> and TestOffice object has <code>adress = \"Washington str.\"</code></p> <p>Read about <code>read()</code> more here</p> <p>At line <code>25-26</code>:</p> <pre><code>res_no_header = join_res.read(\\\n        test_office_md.adress == \"Washington str.\")\n</code></pre> <p>Because no <code>header</code> is passed, <code>header</code> will be set by default as <code>[TestShippmentOffice, TestCustomer, TestOrder]</code> i.e. all models that were joined. </p> <p>At line <code>28</code>:</p> <pre><code>res_empty = join_res.read() # no header, no on_clause\n</code></pre> <p>Because neither <code>header</code>, nor <code>on_clause</code> were passed: </p> <ul> <li> <p><code>header</code> will be set by default as <code>[TestShippmentOffice, TestCustomer, TestOrder]</code> i.e. all models that were joined.</p> </li> <li> <p><code>on_clause</code> will be set by default as <code>None</code>, and it will just return all objects that were saved for these 3 classes.</p> </li> </ul> <p>Calling <code>test_two_joins</code> method will result in list of lists, each sublist will contain three objects of each type:</p> <pre><code>TestCustomer.test_two_joins() # -&gt;\n    # '[[resource.test_join_resource.TestShippmentOffice object, \n    #      pyt1.tests.resource.test_join_resource.TestCustomer object, \n    #      resource.test_join_resource.TestOrder object], ...]'\n</code></pre>"},{"location":"learn/learn/","title":"Learn","text":"<p>Here you can learn more about the classes, functions, decorators and other cool stuff of Epure.</p> <p>If you want to see a real life Epure example, you can read it more here: link</p>"},{"location":"learn/supported_db/","title":"Supported DataBases","text":""},{"location":"learn/supported_db/#supported-dbs-for-epure","title":"Supported DBs for Epure","text":"<p>Epure was mainly developed with PostgresSQL DB 12.16.0, but Epure is really flexible: </p> <p>you can use existing adapters that were made for ... or create your own adapter and use it with NoSql dbs or with whichever you want.</p>"},{"location":"learn/serialization_deserialization/deserialization/","title":"Deserialization with from_dict and from_json","text":""},{"location":"learn/serialization_deserialization/deserialization/#deserialization-using-from_dict-and-from_json","title":"Deserialization using <code>.from_dict()</code> and <code>.from_json()</code>","text":""},{"location":"learn/serialization_deserialization/deserialization/#1-from_dict","title":"1. <code>.from_dict()</code>","text":"edata.py<pre><code>@classmethod\ndef from_dict(cls, _dict:Dict[str, Any]) -&gt; Epure\n</code></pre> <p><code>.from_dict()</code> is a class-method of \"epurized\" (1) class that deserialiezes <code>dict</code> to an object of this \"epurized\" class</p> <ol> <li>\"epurized\" class is class that was decorated by <code>@epure()</code> decorator</li> </ol> <p>We will use Example with nested Epure values defined in <code>to_dict()</code> section. You can find it here:</p>"},{"location":"learn/serialization_deserialization/deserialization/#11-from_dict-when-object-is-saved","title":"1.1 <code>.from_dict()</code> when object is saved","text":"<pre><code>to_dict_ex_inst.save()\n\nserialized_obj = to_dict_ex_inst.to_dict()\n</code></pre> <p>Result of <code>to_dict()</code> with this object you can examine here:</p> <pre><code>deserialized_obj = ToDictEx.from_dict(serialized_obj)\n\ndeserialized_obj.data_id # -&gt; \"12e3d625-64bf-479b-927e-27f69cfc4872\"\ndeserialized_obj.str_val # -&gt; \"In Tech we trust\"\ndeserialized_obj.generic_list # -&gt; [\"cat\", \"dog\", \"yak\"]\n</code></pre>"},{"location":"learn/serialization_deserialization/deserialization/#12-from_dict-when-object-is-not-saved","title":"1.2 <code>.from_dict()</code> when object is not saved","text":"<p>Warning</p> <p>Using <code>.from_dict()</code> with <code>dict</code> that was result of not saved serialized object, may lead to creation of Epure object with <code>None</code> or <code>{}</code> fields where Epure field was supposed to be</p>"},{"location":"learn/serialization_deserialization/deserialization/#2-from_json","title":"2. <code>.from_json()</code>","text":"<p>Similary to <code>to_json</code>, <code>.from_json()</code> is a wrapper for <code>.from_dict()</code> that takes json_string and additional argument of json decoder, to decode json to <code>dict</code>. By default, decoder is jsonpickle decoder</p> edata.py<pre><code>@classmethod\ndef from_json(cls, json_str:str, decoder=jsonpickle.decode) -&gt; Epure: \n</code></pre>"},{"location":"learn/serialization_deserialization/serialization/","title":"Serialization with to_dict and to_json","text":""},{"location":"learn/serialization_deserialization/serialization/#serialization-with-to_dict-or-to_json","title":"Serialization with <code>.to_dict()</code> or <code>.to_json()</code>","text":"<p>In order to serialize Epure object we need to use <code>.to_dict()</code> or <code>.to_json()</code></p> <p>Lets look at example:</p> <p>Example with nested Epure values</p> <pre><code>from epure import epure, Elist, Eset\n\n@epure()\nclass SomeRandEpure:\n    someint:int = 777\n    somecomplexval:complex = 3 + 4j\n\n@epure()\nclass SomeEpure:\n    str_val:str = \"keen\"\n    int_val:int = 80\n    someRandEpureVal:SomeRandEpure = SomeRandEpure()\n\n@epure()\nclass ExampleCls:\n    someEpureVal:SomeEpure = SomeEpure()\n    some_val:str = \"To the moon!\"\n\nex1 = ExampleCls()\nex2 = ExampleCls()\n\n@epure()\nclass ToDictEx:\n    elist_val:Elist[ExampleCls] = Elist[ExampleCls]([ex1, ex2])\n    eset_val:Eset[ExampleCls]= Eset[ExampleCls]([ex1, ex2])\n    epure_val:SomeEpure = SomeEpure()\n    str_val:str = \"In Tech we trust\"\n    int_val:int = 424\n    complex_val:complex = 3 + 4j\n    generic_list:List[str] = [\"cat\", \"dog\", \"yak\"]\n    UPCASE_VAL:str = \"Some UPcase val\"\n\n\nto_dict_ex_inst = ToDictEx()\n</code></pre> <p>Now when we created necessary classes we can serialize epure object to a dict:</p>"},{"location":"learn/serialization_deserialization/serialization/#1-to_dict","title":"1. <code>.to_dict()</code>","text":"edata.py<pre><code>def to_dict(\n        self,\n        full=False, # (1)!\n        lambda_func: Callable \n            = lambda field_name, field_value, field_type, parent_value, rec_depth: # (2)!\n            rec_depth &lt; 1 or isinstance(type(parent_value), ECollectionMetacls),\n        _rec_depth=0, # (3)!\n    ) -&gt; Dict[str, Any]:\n</code></pre> <ol> <li><code>full</code> is parameter that you can pass as <code>True</code> if you want object to be serialized fully, to its end. Check out example here</li> <li><code>lambda_func</code> is explained more below in note section</li> <li><code>_rec_depth</code> is purely private field for <code>.to_dict()</code>. Please avoid using it.</li> </ol> <p>Let's look more closely to the parameters for <code>.to_dict()</code>:</p> <code>to_dict()</code> parameters <ul> <li> <p><code>full</code></p> <p>This <code>bool</code> parameter specifies that you want to serialize Epure object fully, all its children. Example here.</p> </li> <li> <p><code>lambda_func</code></p> <p>This <code>lambda</code> parameter is used to specify what fields of Epure object you want to serialize as <code>dict</code> or <code>UUID</code> in resulting dictionary. </p> <p>By default <code>lambda_func</code> is set to serialize fields of object's first level that are of type <code>Epure</code>, <code>Elist</code> or <code>Eset</code> to <code>UUID</code> value. If you specify them explicitly in <code>lambda_func</code> they will be serialized as <code>dict</code>.</p> <p>If you want to use your own custom <code>lambda</code> function and pass it to <code>.to_dict()</code> - it must follow some requirements:</p> <ul> <li> <p>It must return <code>bool</code> value</p> </li> <li> <p>It must have only this one signature with these 5 arguments (field_name, field_value,                  field_type, parent_value, rec_depth) e.g.:</p> <p>Wrong lambda_func</p> <pre><code>.to_dict(\n    lambda_func = lambda my_condition, another_spec:\n        another_spec += 1\n)\n</code></pre> <p>Right lambda_func</p> <pre><code>.to_dict(\n    lambda_func = lambda field_name, field_value, \n                    field_type, parent_value, rec_depth:\n\n        field_type == Elist or field_name != \"epure_val\"\n)\n</code></pre> <p> </p> <p>Warning</p> <p>Using <code>lambda</code> function with different signature or different return type will not work with <code>.to_dict()</code></p> </li> </ul> <p>Let's look at parameters by which you can modify <code>lambda_func</code>:</p> <ul> <li><code>field_name</code> - name of field</li> <li><code>field_value</code> - value that is assigned to the field</li> <li><code>parent_value</code> - parent value of that field</li> <li> <p><code>rec_depth</code> - the depth of serialization of Epure type fields of this object to dict, starts count from 0, i.e. \"ground\" level of object attrs.</p> <p>For example: if <code>rec_depth == 0</code> it will serialize objects of type Epure for first base level only </p> <p>And <code>rec_depth &lt; 2</code> will serialize children of object (of type Epure) and children of children (that are of type Epure as well)</p> </li> </ul> <p>Example</p> <p>More examples for using custom lambdas here</p> </li> </ul> <p>Warning</p> <p><code>to_dict()</code> will serialize only fields that were defined in class, assigned new members of class won't be serialized</p> Example <pre><code>to_dict_ex_inst.not_declared_in_cls_val = \"42 42 42\"\n\nres = to_dict_ex_inst.to_dict()\n\nres[\"not_declared_in_cls_val\"] # -&gt; KeyError('not_declared_in_cls_val')\n</code></pre> <p>Lets look at four case scenarious with <code>.to_dict()</code></p>"},{"location":"learn/serialization_deserialization/serialization/#11-to_dict-when-object-is-saved","title":"1.1 <code>.to_dict()</code> when object is saved","text":"<p>Now if we save object and we want to serialize it, we will get dict where epure instances will be represented by UUID <code>data_id</code> identifiers</p> <pre><code>to_dict_ex_inst.save() # (1)!\n</code></pre> <ol> <li>Check out more about <code>.save()</code> method here</li> </ol> <p>And then result will be:</p> Result when object is saved <pre><code>to_dict_ex_inst.to_dict() # -&gt; \n    \"{\n        \"data_id\": \"12e3d625-64bf-479b-927e-27f69cfc4872\",\n        \"elist_val\": [\n            {\n                \"data_id\": \"96067115-e35a-4654-910c-8746596e77d7\",\n                \"someEpureVal\": \"b68c45a7-0268-4709-ae9b-818fa75d2976\",\n                \"some_val\": \"To the moon!\",\n            },\n            {\n                \"data_id\": \"9fc82b6d-a251-4de4-9313-19d0bd33a4b4\",\n                \"someEpureVal\": \"b68c45a7-0268-4709-ae9b-818fa75d2976\",\n                \"some_val\": \"To the moon!\",\n            },\n        ],\n        \"eset_val\": [\n            {\n                \"data_id\": \"96067115-e35a-4654-910c-8746596e77d7\",\n                \"someEpureVal\": \"b68c45a7-0268-4709-ae9b-818fa75d2976\",\n                \"some_val\": \"To the moon!\",\n            },\n            {\n                \"data_id\": \"9fc82b6d-a251-4de4-9313-19d0bd33a4b4\",\n                \"someEpureVal\": \"b68c45a7-0268-4709-ae9b-818fa75d2976\",\n                \"some_val\": \"To the moon!\",\n            },\n        ],\n        \"epure_val\": {\n            \"data_id\": \"0f07af91-9e11-45b4-99bd-ae91921be11d\",\n            \"str_val\": \"keen\",\n            \"int_val\": 80,\n            \"someRandEpureVal\": \"8bf57d49-17d6-4168-9cca-d22536710673\",\n        },\n        \"str_val\": \"In Tech we trust\",\n        \"int_val\": 424,\n        \"complex_val\": 3 + 4j,\n        \"generic_list\": [\"cat\", \"dog\", \"yak\"],\n        \"UPCASE_VAL\": \"Some UPcase val\",\n    }\"\n</code></pre>"},{"location":"learn/serialization_deserialization/serialization/#12-to_dict-when-object-is-not-saved","title":"1.2 <code>.to_dict()</code> when object is not saved","text":"<p>Info</p> <p>When we serialize object that was not saved, fields that were not included in lambda function criteria - will be <code>None</code> in resulting dict.</p> Result when object is not saved <pre><code>to_dict_ex_inst.to_dict() # -&gt; \n    \"{\n        \"elist_val\": [\n            {\"someEpureVal\": None, \"some_val\": \"To the moon!\"},\n            {\"someEpureVal\": None, \"some_val\": \"To the moon!\"},\n        ],\n        \"eset_val\": [\n            {\"someEpureVal\": None, \"some_val\": \"To the moon!\"},\n            {\"someEpureVal\": None, \"some_val\": \"To the moon!\"},\n        ],\n        \"epure_val\": {\n            \"str_val\": \"keen\", \n            \"int_val\": 80, \n            \"someRandEpureVal\": None\n        },\n        \"str_val\": \"In Tech we trust\",\n        \"int_val\": 424,\n        \"complex_val\": 3 + 4j,\n        \"generic_list\": [\"cat\", \"dog\", \"yak\"],\n        \"UPCASE_VAL\": \"Some UPcase val\",\n    }\"\n</code></pre>"},{"location":"learn/serialization_deserialization/serialization/#13-passing-custom-lambda-function-to-to_dict","title":"1.3 passing custom <code>lambda</code> function to <code>.to_dict()</code>","text":"<p>So for example we want to get serialized <code>dict</code> where:</p> <ul> <li> <p>All children of object of type <code>Elist</code> to be serialized not as <code>dict</code>, but as <code>UUID</code>.</p> </li> <li> <p>First and second level children of object of type <code>Epure</code> to be serialized as <code>dict</code> and not <code>UUID</code>.</p> </li> </ul> <pre><code>result = to_dict_ex_inst.to_dict(lambda_func = \n        lambda field_name, field_value, field_type, parent_value, rec_depth:\n            field_type != Elist and rec_depth &lt;= 1\n)\n</code></pre> <p>The result will be:</p> Result <pre><code>result # -&gt; \n\"{\n    \"data_id\": \"2681b947-e7e7-4ac5-ad02-5cdaf6145f08\",   # 1 level child\n    \"elist_val\": \"fb3bc534-e54d-4a01-8d0b-3d527c67ae44\", # 1 level child\n    \"eset_val\": [                                        # 1 level child\n        {\n            \"data_id\": \"9dd8d28b-c660-4fa1-a5bd-11636e4d3b45\", # 2 level child\n            \"someEpureVal\": {                                   # 2 level child\n                \"data_id\": \"e1d0fa2f-fa6a-4c7a-bd6c-0566b651f955\", # 3 level child\n                \"str_val\": \"keen\",\n                \"int_val\": 80,\n                \"someRandEpureVal\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n            },\n            \"some_val\": \"To the moon!\", # 2 level child\n        },\n        {\n            \"data_id\": \"3ab7589d-1a0f-4da9-b66a-3af2a1183902\", # 2 level child\n            \"someEpureVal\": {                                  # 2 level child\n                \"data_id\": \"e1d0fa2f-fa6a-4c7a-bd6c-0566b651f955\", # 3 level child\n                \"str_val\": \"keen\",\n                \"int_val\": 80,\n                \"someRandEpureVal\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n            },\n            \"some_val\": \"To the moon!\", # 2 level child\n        },\n    ],\n    \"epure_val\": {                                          # 1 level child\n        \"data_id\": \"08be3fe4-c4a7-407e-a447-0f9b7b4e57bc\",  # 2 level child\n        \"str_val\": \"keen\",                                  # 2 level child\n        \"int_val\": 80,                                      # 2 level child\n        \"someRandEpureVal\": {                               # 2 level child\n            \"data_id\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\", # 3 level child\n            \"someint\": 777,\n            \"somecomplexval\": 3 + 4j,\n        },\n    },\n    \"str_val\": \"In Tech we trust\",  # 1 level child\n    \"int_val\": 424,                 # 1 level child\n    \"complex_val\": 3 + 4j,          # 1 level child\n    \"generic_list\": [\"cat\", \"dog\", \"yak\"],  # 1 level child\n    \"UPCASE_VAL\": \"Some UPcase val\",    # 1 level child\n}\"\n</code></pre> <p>As you can see elist_val became UUID, and children until 3 level of type Epure became dict</p> <p>Note</p> <p>Please note that <code>full</code> parameter has higher priority than <code>lambda_function</code> parameter. If <code>full</code> is True - then every Epure, Elist or Eset value will be serialized to <code>dict</code> no matter what was specified in <code>lambda</code> function.</p>"},{"location":"learn/serialization_deserialization/serialization/#14-using-to_dict-with-full-true","title":"1.4 using <code>.to_dict()</code> with <code>full = True</code>","text":"<p>Parameter <code>full</code> can be seen as a sort of short-cut to fully serialize whole object to <code>dict</code>.</p> <p>Because of <code>full</code> parameter higher priority than <code>lambda_func</code>, these expressions</p> <pre><code>result = to_dict_ex_inst.to_dict(full = True)\n</code></pre> <p>and</p> <pre><code>result = to_dict_ex_inst.to_dict(\n    full = True, \n    lambda_func = lambda field_name, field_value,\\ \n        field_type, parent_value, rec_depth:\n                ...\n)\n</code></pre> <p>Will give same result:</p> Result <pre><code>result #-&gt;\n\"{\n    \"data_id\": \"2681b947-e7e7-4ac5-ad02-5cdaf6145f08\",\n    \"elist_val\": [\n        {\n            \"data_id\": \"b98e0c51-ed27-49b1-a94b-619dc4c084e1\",\n            \"someEpureVal\": {\n                \"data_id\": \"e1d0fa2f-fa6a-4c7a-bd6c-0566b651f955\",\n                \"str_val\": \"keen\",\n                \"int_val\": 80,\n                \"someRandEpureVal\": {\n                    \"data_id\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n                    \"someint\": 777,\n                    \"somecomplexval\": 3 + 4j,\n                },\n            },\n            \"some_val\": \"To the moon!\",\n        },\n        {\n            \"data_id\": \"63ae35e8-671c-4e91-823b-9cc8dfcc0c83\",\n            \"someEpureVal\": {\n                \"data_id\": \"e1d0fa2f-fa6a-4c7a-bd6c-0566b651f955\",\n                \"str_val\": \"keen\",\n                \"int_val\": 80,\n                \"someRandEpureVal\": {\n                    \"data_id\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n                    \"someint\": 777,\n                    \"somecomplexval\": 3 + 4j,\n                },\n            },\n            \"some_val\": \"To the moon!\",\n        },\n    ],\n    \"eset_val\": [\n        {\n            \"data_id\": \"9dd8d28b-c660-4fa1-a5bd-11636e4d3b45\",\n            \"someEpureVal\": {\n                \"data_id\": \"e1d0fa2f-fa6a-4c7a-bd6c-0566b651f955\",\n                \"str_val\": \"keen\",\n                \"int_val\": 80,\n                \"someRandEpureVal\": {\n                    \"data_id\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n                    \"someint\": 777,\n                    \"somecomplexval\": 3 + 4j,\n                },\n            },\n            \"some_val\": \"To the moon!\",\n        },\n        {\n            \"data_id\": \"3ab7589d-1a0f-4da9-b66a-3af2a1183902\",\n            \"someEpureVal\": {\n                \"data_id\": \"e1d0fa2f-fa6a-4c7a-bd6c-0566b651f955\",\n                \"str_val\": \"keen\",\n                \"int_val\": 80,\n                \"someRandEpureVal\": {\n                    \"data_id\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n                    \"someint\": 777,\n                    \"somecomplexval\": 3 + 4j,\n                },\n            },\n            \"some_val\": \"To the moon!\",\n        },\n    ],\n    \"epure_val\": {\n        \"data_id\": \"08be3fe4-c4a7-407e-a447-0f9b7b4e57bc\",\n        \"str_val\": \"keen\",\n        \"int_val\": 80,\n        \"someRandEpureVal\": {\n            \"data_id\": \"8ae6f23e-108b-41c3-a3ae-282adb0e77cc\",\n            \"someint\": 777,\n            \"somecomplexval\": 3 + 4j,\n        },\n    },\n    \"str_val\": \"In Tech we trust\",\n    \"int_val\": 424,\n    \"complex_val\": 3 + 4j,\n    \"generic_list\": [\"cat\", \"dog\", \"yak\"],\n    \"UPCASE_VAL\": \"Some UPcase val\",\n}\"\n</code></pre>"},{"location":"learn/serialization_deserialization/serialization/#2-to_json","title":"2. <code>to_json()</code>","text":"edata.py<pre><code>def to_json(\n        self,\n        full=False,\n        lambda_func: Callable = lambda field_name, field_value, field_type, parent_value, rec_depth: rec_depth\n        &lt; 1\n        or isinstance(type(parent_value), ECollectionMetacls),\n        _rec_depth=0,\n        encoder: Callable = jsonpickle.encode,\n    ) -&gt; str:\n</code></pre> <p><code>to_json()</code> can be treated just as an wrapper for <code>.to_dict()</code>, that takes json serializer function by additional <code>encoder</code> argument and returns already serialized json string. By default encoder is jsonpickle encoder</p>"}]}